package com.texasstudentmedia;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;

import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

import android.util.Log;

public class Feed{
	@SuppressWarnings("unused")
	private final String TAG = "Texas Student Media";
	private String name;
	private String url;
	private ArrayList<FeedItem> feed_items;
	private int max_size;
	private SafeThread thread;
	
	public Feed(String name, String url){
		this.name = name;
		this.url = url;
		feed_items = new ArrayList<FeedItem>();
		max_size = 0;
		
		thread = new SafeThread(){
			public void doStuff(){
				if (max_size == 0 || feed_items.size() < max_size){
	
					// Go through file reading the items
					try {
						XMLReader xml_reader = SAXParserFactory.newInstance().newSAXParser().getXMLReader();
						xml_reader.setContentHandler(new DefaultHandler() {
							private HashMap<String, String> feed_item = new HashMap<String, String>();
							private String value = "";
							private final int IN_NOTHING = 0,
											  IN_ITEM = 1,
											  IN_TITLE = 2, 
											  IN_DESC = 3;
							private int state = IN_NOTHING;
	
							@Override
							public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
								if (localName.equalsIgnoreCase("item"))
									state = IN_ITEM;
								else if (state == IN_ITEM) {
									if (localName.equalsIgnoreCase("title"))
										state = IN_TITLE;
									else if (localName.equalsIgnoreCase("description"))
										state = IN_DESC;
								}
							}
	
							@Override
							public void endElement(String uri, String localName, String qName) throws SAXException {
								if (localName.equalsIgnoreCase("title") && state == IN_TITLE) {
									feed_item.put("title", value);
									value = "";
									state = IN_ITEM;
								} else if (localName.equalsIgnoreCase("description") && state == IN_DESC) {
									feed_item.put("description", value);
									value = "";
									state = IN_ITEM;
								} else if (localName.equalsIgnoreCase("item") && state == IN_ITEM) {
									feed.add(feed_item);
									Log.v(TAG, "  " + feed_item.get("title"));
									state = IN_NOTHING;
									if (feed.size() >= min_items)
										// Minimum number of items was
										// retrieved.
										// This feed is done
										throw new SAXException();
									else
										feed_item = new HashMap<String, String>();
								}
							}
	
							@Override
							public void characters(char[] ch, int start,
									int length) throws SAXException {
								if (state > IN_ITEM)
									value += new String(ch, start, length);
							}
	
						});
						Log.v(TAG, feeds[i][0]);
						xml_reader.parse(new InputSource(new URL(feeds[i][1]).openStream()));
					} catch (MalformedURLException e) {
						e.printStackTrace();
					} catch (SAXException e) {
						// e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					} catch (ParserConfigurationException e) {
						e.printStackTrace();
					} catch (FactoryConfigurationError e) {
						e.printStackTrace();
					}
				}else{
					pause();
				}
			}
		};
	}
	
	public void setMaxItems(int max){
		max_size = (max < 0) ? 0 : max;
	}
	
	public void fetchData(){
		if (!thread.isAlive())
			thread.start();
		else
			thread.unpause();
	}
	public boolean isFetchingData(){ return !thread.isPaused(); }

	public void stop() {
		if (thread.isAlive())
			thread.kill();
	}
}
